import 'package:circular_countdown_timer/circular_countdown_timer.dart';
import 'package:flutter/material.dart';
import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/services.dart';

class SoundDetailScreen extends StatefulWidget {
  final String title;
  final String sound;

  const SoundDetailScreen({
    super.key,
    required this.title,
    required this.sound,
  });

  @override
  SoundDetailScreenState createState() => SoundDetailScreenState();
}

class SoundDetailScreenState extends State<SoundDetailScreen> {
  final CountDownController _controller = CountDownController();
  final TextEditingController _durationController = TextEditingController();
  late AudioPlayer _audioPlayer;
  bool _isPlaying = false;
  bool _isPaused = false;
  int _durationInSeconds = 0; // Store duration in seconds

  @override
  void initState() {
    super.initState();
    _audioPlayer = AudioPlayer();
    _audioPlayer.setReleaseMode(ReleaseMode.loop); // Loop the audio

    _audioPlayer.onPlayerStateChanged.listen((PlayerState state) {
      if (state == PlayerState.stopped) {
        setState(() {
          _isPlaying = false;
          _isPaused = false;
        });
      }
    });
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    super.dispose();
  }

  void _playAudio() {
    setState(() {
      _durationInSeconds = (int.tryParse(_durationController.text) ?? 0) * 60;
    });

    if (_durationInSeconds > 0) {
      if (_isPaused) {
        _audioPlayer.resume();
      } else {
        _audioPlayer.play(AssetSource(widget.sound));
      }

      setState(() {
        _isPlaying = true;
        _isPaused = false;
      });

      _controller.restart(duration: _durationInSeconds);
      _controller.start();

      Future.delayed(Duration(seconds: _durationInSeconds), () {
        _stopAudio();
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Audio stopped after duration.')),
        );
      });
    }
  }

  void _pauseAudio() {
    _audioPlayer.pause();
    _controller.pause();
    setState(() {
      _isPlaying = false;
      _isPaused = true;
    });
  }

  void _stopAudio() {
    _audioPlayer.stop();
    _controller.reset(); // Reset the countdown timer
    setState(() {
      _isPlaying = false;
      _isPaused = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.blueGrey[900],
        title: Text(
          widget.title,
          style: const TextStyle(
            color: Colors.white,
            fontSize: 24,
            fontWeight: FontWeight.bold,
          ),
        ),
        elevation: 10,
        shadowColor: Colors.black.withOpacity(0.5),
      ),
      body: SingleChildScrollView(
        child: Center(
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                Text(
                  widget.title,
                  style: const TextStyle(
                    fontSize: 28,
                    fontWeight: FontWeight.w600,
                    color: Colors.white,
                    shadows: [
                      Shadow(
                        blurRadius: 10,
                        color: Colors.black38,
                        offset: Offset(2, 2),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 20),
                Text('Timer'),
                SizedBox(
                  width: 110,
                  child: TextField(
                    inputFormatters: [
                      FilteringTextInputFormatter.digitsOnly, // Allows only digits
                    ],
                    controller: _durationController,
                    keyboardType: TextInputType.number,
                    maxLength: 2,
                    textAlign: TextAlign.center, // Center align text for a cleaner look
                    decoration: InputDecoration(
                      prefixIcon: const Icon(Icons.timer),
                      suffixText: 'min ',
                      filled: true,
                      fillColor: Colors.grey[200],
                      contentPadding: const EdgeInsets.symmetric(vertical: 10, horizontal: 12), // Reduce padding
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(16.0), // More rounded border
                        borderSide: BorderSide.none, // Remove border outline for a minimal look
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(16.0),
                        borderSide: const BorderSide(color: Colors.grey, width: 1), // Subtle border
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(16.0),
                        borderSide: const BorderSide(color: Colors.blueAccent, width: 2), // Highlighted border
                      ),
                    ),
                    style: const TextStyle(
                      fontSize: 15, // Slightly larger font for readability
                    ),
                  ),
                ),
                CircularCountDownTimer(
                  duration: _durationInSeconds,
                  initialDuration: 0,
                  controller: _controller,
                  width: MediaQuery.of(context).size.width / 2,
                  height: MediaQuery.of(context).size.height / 2,
                  ringColor: Colors.grey[300]!,
                  fillColor: Colors.blueAccent,
                  backgroundColor: Colors.blue[600],
                  strokeWidth: 20.0,
                  strokeCap: StrokeCap.round,
                  textStyle: const TextStyle(
                    fontSize: 33.0,
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                  textFormat: CountdownTextFormat.HH_MM_SS,
                  isReverse: true,
                  isTimerTextShown: true,
                  autoStart: false,
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: _isPlaying ? null : _playAudio,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.green,
                          padding: const EdgeInsets.symmetric(vertical: 15),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                          ),
                          shadowColor: Colors.black26,
                          elevation: 12,
                        ),
                        icon: Icon(
                          _isPaused ? Icons.play_arrow : Icons.play_circle_fill,
                          color: Colors.white,
                          size: 24,
                        ),
                        label: Text(
                          _isPaused ? "Resume" : "Play",
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 10),
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: _isPlaying ? _pauseAudio : null,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.orangeAccent,
                          padding: const EdgeInsets.symmetric(vertical: 15),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                          ),
                          shadowColor: Colors.black26,
                          elevation: 12,
                        ),
                        icon: const Icon(
                          Icons.pause_circle_filled,
                          color: Colors.white,
                          size: 24,
                        ),
                        label: const Text(
                          'Pause',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 10),
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: _stopAudio,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.redAccent,
                          padding: const EdgeInsets.symmetric(vertical: 15),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                          ),
                          shadowColor: Colors.black26,
                          elevation: 12,
                        ),
                        icon: const Icon(
                          Icons.stop_circle,
                          color: Colors.white,
                          size: 24,
                        ),
                        label: const Text(
                          'Restart',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
