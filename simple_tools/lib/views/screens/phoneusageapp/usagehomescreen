/*  import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:device_apps/device_apps.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:app_settings/app_settings.dart';

class UsageHomeScreen extends StatefulWidget {
  const UsageHomeScreen({super.key});

  @override
  State<UsageHomeScreen> createState() => _UsageHomeScreenState();
}

class _UsageHomeScreenState extends State<UsageHomeScreen> {
  final _appState = AppState();
  final _uiBuilder = UsageUIBuilder();
  final _permissionHandler = PermissionHandler();
  final _appDataManager = AppDataManager();

  @override
  void initState() {
    super.initState();
    _initializeScreen();
  }

  Future<void> _initializeScreen() async {
    await _permissionHandler.checkAndRequestPermissions(
      context,
      onPermissionGranted: () async {
        _appState.hasUsagePermission = true;
        await _appDataManager.initialize();
        setState(() => _appState.isLoading = false);
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    if (!_appState.hasUsagePermission) {
      return _uiBuilder.buildPermissionScreen();
    }

    if (_appState.isLoading) {
      return _uiBuilder.buildLoadingScreen();
    }

    return _uiBuilder.buildMainScreen(
      appState: _appState,
      appDataManager: _appDataManager,
      onTimeRangeChanged: (hours) => setState(() => _appState.selectedTimeRange = hours),
      onSetAppLimit: (packageName) => _appDataManager.setAppLimit(context, packageName),
    );
  }
}

class AppState {
  bool isLoading = true;
  bool hasUsagePermission = false;
  int selectedTimeRange = 24;
}

class PermissionHandler {
  Future<void> checkAndRequestPermissions(
    BuildContext context, {
    required Function onPermissionGranted,
  }) async {
    final granted = await DeviceApps.isUsageAccessGranted();
    if (!granted) {
      await _showPermissionDialog(context);
    } else {
      await onPermissionGranted();
    }
  }

  Future<void> _showPermissionDialog(BuildContext context) async {
    await showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('Usage Access Required'),
        content: const Text('This app needs usage access permission to track app usage. Please enable it in settings.'),
        actions: [
          TextButton(
            onPressed: () async {
              await AppSettings.openAppSettings();
              Navigator.pop(context);
              checkAndRequestPermissions(context, onPermissionGranted: () {});
            },
            child: const Text('Open Settings'),
          ),
        ],
      ),
    );
  }
}

class AppDataManager {
  Map<String, int> appLimits = {};
  Map<String, Application> appInfo = {};
  List<FlSpot> dailyUsageData = [];

  Future<void> initialize() async {
    await Future.wait([
      _loadAppLimits(),
      _loadAppInfo(),
    ]);
  }

  Future<void> _loadAppInfo() async {
    final apps = await DeviceApps.getInstalledApplications(
      includeAppIcons: true,
      includeSystemApps: true,
      onlyAppsWithLaunchIntent: true,
    );
    
    appInfo = {for (var app in apps) app.packageName: app};
  }

  Future<void> _loadAppLimits() async {
    final prefs = await SharedPreferences.getInstance();
    final limits = prefs.getStringList('appLimits') ?? [];
    
    appLimits = Map.fromEntries(
      limits.map((limit) {
        final parts = limit.split(':');
        return parts.length == 2 
          ? MapEntry(parts[0], int.parse(parts[1]))
          : null;
      }).whereType<MapEntry<String, int>>()
    );
  }

  Future<void> _saveAppLimits() async {
    final prefs = await SharedPreferences.getInstance();
    final limits = appLimits.entries
        .map((e) => '${e.key}:${e.value}')
        .toList();
    await prefs.setStringList('appLimits', limits);
  }

  Future<void> setAppLimit(BuildContext context, String packageName) async {
    final TextEditingController limitController = TextEditingController(
      text: appLimits[packageName]?.toString()
    );
    
    await showDialog(
      context: context,
      builder: (context) => LimitDialog(
        packageName: packageName,
        controller: limitController,
        appInfo: appInfo,
        onSetLimit: (value) async {
          appLimits[packageName] = value;
          await _saveAppLimits();
        },
      ),
    );
  }
}

class UsageUIBuilder {
  Widget buildPermissionScreen() {
    return const Scaffold(
      body: Center(
        child: Text('Please grant usage access permission'),
      ),
    );
  }

  Widget buildLoadingScreen() {
    return const Scaffold(
      body: Center(
        child: CircularProgressIndicator(),
      ),
    );
  }

  Widget buildMainScreen({
    required AppState appState,
    required AppDataManager appDataManager,
    required Function(int) onTimeRangeChanged,
    required Function(String) onSetAppLimit,
  }) {
    return Scaffold(
      backgroundColor: Colors.grey[100],
      appBar: _buildAppBar(),
      body: Column(
        children: [
          TimeRangeSelector(
            selectedRange: appState.selectedTimeRange,
            onRangeChanged: onTimeRangeChanged,
          ),
          UsageSummary(appDataManager: appDataManager),
          AppList(
            appDataManager: appDataManager,
            onSetAppLimit: onSetAppLimit,
          ),
        ],
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      title: const Text(
        'Digital Wellbeing',
        style: TextStyle(color: Colors.black87),
      ),
    );
  }
}

class TimeRangeSelector extends StatelessWidget {
  final int selectedRange;
  final Function(int) onRangeChanged;

  const TimeRangeSelector({
    super.key,
    required this.selectedRange,
    required this.onRangeChanged,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          _buildTimeRangeButton(24, 'Today'),
          _buildTimeRangeButton(168, 'Week'),
          _buildTimeRangeButton(720, 'Month'),
        ],
      ),
    );
  }

  Widget _buildTimeRangeButton(int hours, String label) {
    final isSelected = selectedRange == hours;
    return GestureDetector(
      onTap: () => onRangeChanged(hours),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
        decoration: BoxDecoration(
          color: isSelected ? Colors.blue : Colors.white,
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.1),
              spreadRadius: 1,
              blurRadius: 3,
              offset: const Offset(0, 1),
            ),
          ],
        ),
        child: Text(
          label,
          style: TextStyle(
            color: isSelected ? Colors.white : Colors.black87,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }
}

class UsageSummary extends StatelessWidget {
  final AppDataManager appDataManager;

  const UsageSummary({super.key, required this.appDataManager});

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(15),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 5,
            blurRadius: 7,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Usage Summary',
                    style: Theme.of(context).textTheme.titleLarge,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Active Apps: ${appDataManager.appInfo.length}',
                    style: Theme.of(context).textTheme.bodyMedium,
                  ),
                ],
              ),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.blue.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(10),
                ),
                child: Text(
                  '${appDataManager.appLimits.length} Limits Set',
                  style: const TextStyle(
                    color: Colors.blue,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

class AppList extends StatelessWidget {
  final AppDataManager appDataManager;
  final Function(String) onSetAppLimit;

  const AppList({
    super.key,
    required this.appDataManager,
    required this.onSetAppLimit,
  });

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: ListView.builder(
        padding: const EdgeInsets.symmetric(horizontal: 16),
        itemCount: appDataManager.appInfo.length,
        itemBuilder: (context, index) {
          final app = appDataManager.appInfo.values.elementAt(index);
          final packageName = app.packageName;
          final limit = appDataManager.appLimits[packageName];
          
          return AppListItem(
            app: app,
            limit: limit,
            onSetLimit: () => onSetAppLimit(packageName),
          );
        },
      ),
    );
  }
}

class AppListItem extends StatelessWidget {
  final Application app;
  final int? limit;
  final VoidCallback onSetLimit;

  const AppListItem({
    super.key,
    required this.app,
    required this.limit,
    required this.onSetLimit,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 2,
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: ListTile(
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        leading: _buildAppIcon(),
        title: Text(
          app.appName,
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
        subtitle: _buildAppLimitBadge(),
        trailing: IconButton(
          icon: Icon(
            Icons.timer,
            color: Colors.blue[400],
          ),
          onPressed: onSetLimit,
        ),
      ),
    );
  }

  Widget _buildAppIcon() {
    return ClipRRect(
      borderRadius: BorderRadius.circular(12),
      child: app is ApplicationWithIcon
        ? Image.memory((app as ApplicationWithIcon).icon, width: 48, height: 48)
        : Container(
            width: 48,
            height: 48,
            color: Colors.grey[200],
            child: const Icon(Icons.android),
          ),
    );
  }

  Widget _buildAppLimitBadge() {
    if (limit == null) return const SizedBox.shrink();
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          margin: const EdgeInsets.only(top: 4),
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
          decoration: BoxDecoration(
            color: Colors.green[50],
            borderRadius: BorderRadius.circular(4),
          ),
          child: Text(
            'Limit: ${limit}m',
            style: const TextStyle(
              color: Colors.green,
              fontSize: 12,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      ],
    );
  }
}

class LimitDialog extends StatelessWidget {
  final String packageName;
  final TextEditingController controller;
  final Map<String, Application> appInfo;
  final Function(int) onSetLimit;

  const LimitDialog({
    super.key,
    required this.packageName,
    required this.controller,
    required this.appInfo,
    required this.onSetLimit,
  });

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
      ),
      child: Container(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'Set Daily Limit',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 20),
            Text(
              appInfo[packageName]?.appName ?? packageName,
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 20),
            _buildLimitTextField(),
            const SizedBox(height: 20),
            _buildDialogActions(context),
          ],
        ),
      ),
    );
  }

  Widget _buildLimitTextField() {
    return TextField(
      controller: controller,
      keyboardType: TextInputType.number,
      decoration: InputDecoration(
        filled: true,
        fillColor: Colors.grey[200],
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: BorderSide.none,
        ),
        hintText: 'Enter limit in minutes',
        prefixIcon: const Icon(Icons.timer),
      ),
    );
  }

  Widget _buildDialogActions(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: () {
            if (controller.text.isNotEmpty) {
              onSetLimit(int.parse(controller.text));
              Navigator.pop(context);
            }
          },
          style: ElevatedButton.styleFrom(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(10),
            ),
          ),
          child: const Text('Set Limit'),
        ),
      ],
    );
  }
}
*/